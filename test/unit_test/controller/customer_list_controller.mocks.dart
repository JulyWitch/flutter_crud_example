// Mocks generated by Mockito 5.4.0 from annotations
// in mc_crud_test/test/unit_test/controller/customer_list_controller.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mc_crud_test/application/customer_facade_service.dart' as _i3;
import 'package:mc_crud_test/domain/entity/customer.dart' as _i5;
import 'package:mc_crud_test/domain/interface/customer_repository.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCustomerRepository_0 extends _i1.SmartFake
    implements _i2.CustomerRepository {
  _FakeCustomerRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CustomerFacadeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCustomerFacadeService extends _i1.Mock
    implements _i3.CustomerFacadeService {
  MockCustomerFacadeService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CustomerRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCustomerRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CustomerRepository);
  @override
  _i4.Future<void> add(_i5.CustomerEntity? customer) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [customer],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> delete(_i5.CustomerEntity? customer) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [customer],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<_i5.CustomerEntity?> get(String? id) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [id],
        ),
        returnValue: _i4.Future<_i5.CustomerEntity?>.value(),
      ) as _i4.Future<_i5.CustomerEntity?>);
  @override
  _i4.Future<List<_i5.CustomerEntity>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue:
            _i4.Future<List<_i5.CustomerEntity>>.value(<_i5.CustomerEntity>[]),
      ) as _i4.Future<List<_i5.CustomerEntity>>);
  @override
  _i4.Future<bool> isEmailAvailable(String? email) => (super.noSuchMethod(
        Invocation.method(
          #isEmailAvailable,
          [email],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<bool> isFirstNameLastNameBirthDateAvailable(
    String? firstName,
    String? lastName,
    DateTime? dateOfBirth,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isFirstNameLastNameBirthDateAvailable,
          [
            firstName,
            lastName,
            dateOfBirth,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<void> update(_i5.CustomerEntity? customer) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [customer],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
